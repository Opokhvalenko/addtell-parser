name: adtell-stack

services:
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    restart: unless-stopped
    ports: ["8123:8123","9000:9000"]
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:?set-in-.env}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:?set-in-.env}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:?set-in-.env}
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8123/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 60
      start_period: 30s
    ulimits:
      nofile: { soft: 262144, hard: 262144 }
    volumes:
      - clickhouse_data:/var/lib/clickhouse

  tabix:
    image: spoonest/clickhouse-tabix-web-client:latest
    container_name: tabix
    platform: linux/amd64
    restart: unless-stopped
    ports: ["8080:80"]
    environment:
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:?set-in-.env}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:?set-in-.env}
    depends_on:
      clickhouse:
        condition: service_healthy

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    env_file: [.env]
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}
      HOST: 0.0.0.0
      UPLOADS_DIR: /app/uploads
      COOKIE_SECURE: ${COOKIE_SECURE:-false}
      APP_ORIGIN: ${APP_ORIGIN:?set-in-.env}
      DATABASE_URL: ${DATABASE_URL:?set-in-.env}

      CLICKHOUSE_URL: ${CLICKHOUSE_URL:?set-in-.env}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:?set-in-.env}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:?set-in-.env}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:?set-in-.env}

    ports: ["3000:3000"]
    volumes:
      - ./uploads:/app/uploads
      - ./public:/app/public
    user: "node"
    read_only: true
    tmpfs: [/tmp]
    depends_on:
      clickhouse:
        condition: service_healthy

  mongo-keyfile:
    image: alpine:3.20
    command: >
      sh -lc '
        set -e;
        mkdir -p /data/config;
        if [ ! -f /data/config/keyfile ]; then
          head -c 756 /dev/urandom | base64 > /data/config/keyfile;
        fi;
        chmod 600 /data/config/keyfile;
        chown -R 999:999 /data
      '
    volumes:
      - mongo_data:/data
    restart: "no"
    profiles: ["local-db"]

  mongo:
    image: mongo:7
    depends_on:
      mongo-keyfile:
        condition: service_completed_successfully
    command: ["mongod","--replSet","rs0","--bind_ip_all","--keyFile","/data/config/keyfile"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-root}
    ports: ["27017:27017"]
    volumes:
      - mongo_data:/data
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin | grep 1 || exit 1"]
      interval: "5s"
      timeout: "5s"
      retries: 60
      start_period: "20s"
    profiles: ["local-db"]

  mongo-setup:
    image: mongo:7
    depends_on:
      mongo:
        condition: service_healthy
    restart: "no"
    entrypoint:
      - bash
      - -lc
      - |
        set -e
        echo "Ensuring replica set is initiated..."
        mongosh --quiet --host mongo -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --authenticationDatabase admin --eval '
          try { const s = rs.status(); print("Replica set already exists:", s.set); }
          catch (e) { print("Replica set not initiated, initiating...");
            rs.initiate({ _id: "rs0", members: [{ _id: 0, host: "mongo:27017" }] }); }
        '
    profiles: ["local-db"]

volumes:
  clickhouse_data:
  mongo_data: